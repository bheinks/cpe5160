C51 COMPILER V9.53.0.0   SPI                                                               10/12/2018 14:45:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SPI.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "SPI.h"
   2          #include <stdio.h>
   3          
   4          uint8_t SPI_master_init(uint32_t clock_freq) {
   5   1          uint8_t divider, return_value;
   6   1          
   7   1          divider = (OSC_FREQ * 6) / (OSC_PER_INST * clock_freq);
   8   1          return_value = 0;
   9   1          
  10   1          // set SPCON depending on divider value
  11   1          if (divider < 2) {
  12   2              SPCON = 0x70 | (CPOL << 3) | (CPHA << 2);
  13   2          }
  14   1          else if (divider < 4) {
  15   2              SPCON = 0x71 | (CPOL << 3) | (CPHA << 2);
  16   2          }
  17   1          else if (divider < 8) {
  18   2              SPCON = 0x72 | (CPOL << 3) | (CPHA << 2);
  19   2          }
  20   1          else if (divider < 16) {
  21   2              SPCON = 0x73 | (CPOL << 3) | (CPHA << 2);
  22   2          }
  23   1          else if (divider < 32) {
  24   2              SPCON = 0xF0 | (CPOL << 3) | (CPHA << 2);
  25   2          }
  26   1          else if (divider < 64) {
  27   2              SPCON = 0xF1 | (CPOL << 3) | (CPHA << 2);
  28   2          }
  29   1          else if (divider < 128) {
  30   2              SPCON = 0xF2 | (CPOL << 3) | (CPHA << 2);
  31   2          }
  32   1          else {
  33   2              return_value = CLOCK_RATE_ERROR;
  34   2          }
  35   1          
  36   1          return return_value;
  37   1      }
  38          
  39          uint8_t SPI_transfer(uint8_t send_value, uint8_t * rec_value) {
  40   1          uint8_t error_flag, status;
  41   1          uint16_t timeout;
  42   1          
  43   1          SPDAT = send_value;
  44   1          
  45   1          timeout = 0;
  46   1          do {
  47   2              status = SPSTA;
  48   2              timeout++;
  49   2          } while (((status & 0xF0) == 0) && (timeout != 0));
  50   1          
  51   1          if (timeout == 0) {
  52   2              error_flag = TIMEOUT_ERROR;
  53   2              *rec_value = 0xFF;
  54   2              printf("(SPI_transfer) TIMEOUT_ERROR\n");
  55   2          }
C51 COMPILER V9.53.0.0   SPI                                                               10/12/2018 14:45:20 PAGE 2   

  56   1          else if ((status & 0x70) != 0) {
  57   2              error_flag = SPI_ERROR;
  58   2              *rec_value = 0xFF;
  59   2              printf("(SPI_transfer) SPI_ERROR\n");
  60   2          }
  61   1          else {
  62   2              error_flag = NO_ERROR;
  63   2              *rec_value = SPDAT;
  64   2              printf("(SPI_transfer) NO_ERROR\n");
  65   2          }
  66   1          
  67   1          return error_flag;
  68   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =     81    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
