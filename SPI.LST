C51 COMPILER V9.53.0.0   SPI                                                               10/12/2018 04:29:04 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN SPI.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SPI.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*#include "SPI.h"
   2          #include <stdio.h>
   3          
   4          uint8_t SPI_master_init(uint32_t clock_freq) {
   5              uint8_t divider, return_value;
   6              
   7              divider = (OSC_FREQ * 6) / (OSC_PER_INST * clock_freq);
   8              return_value = 0;
   9              
  10              // set SPCON depending on divider value
  11              if (divider < 2) {
  12                  SPCON = 0x70;// | (CPOL << 3) | (CPHA << 2);
  13              }
  14              else if (divider < 4) {
  15                  SPCON = 0x71;// | (CPOL << 3) | (CPHA << 2);
  16              }
  17              else if (divider < 8) {
  18                  SPCON = 0x72;// | (CPOL << 3) | (CPHA << 2);
  19              }
  20              else if (divider < 16) {
  21                  SPCON = 0x73;// | (CPOL << 3) | (CPHA << 2);
  22              }
  23              else if (divider < 32) {
  24                  SPCON = 0xF0;// | (CPOL << 3) | (CPHA << 2);
  25              }
  26              else if (divider < 64) {
  27                  SPCON = 0xF1;// | (CPOL << 3) | (CPHA << 2);
  28              }
  29              else if (divider < 128) {
  30                  SPCON = 0xF2;// | (CPOL << 3) | (CPHA << 2);
  31              }
  32              else {
  33                  return_value = CLOCK_RATE_ERROR;
  34              }
  35              
  36              return return_value;
  37          }
  38          
  39          uint8_t SPI_transfer(uint8_t send_value, uint8_t * rec_value) {
  40              uint8_t error_flag, status;
  41              uint16_t timeout;
  42              
  43              SPDAT = send_value;
  44              
  45              timeout = 0;
  46              do {
  47                  status = SPSTA;
  48                  timeout++;
  49              } while (((status & 0xF0) == 0) && (timeout != 0));
  50              
  51              if (timeout == 0) {
  52                  error_flag = TIMEOUT_ERROR;
  53                  *rec_value = 0xFF;
  54                  printf("(SPI_transfer) TIMEOUT_ERROR\n");
  55              }
C51 COMPILER V9.53.0.0   SPI                                                               10/12/2018 04:29:04 PAGE 2   

  56              else if ((status & 0x70) != 0) {
  57                  error_flag = SPI_ERROR;
  58                  *rec_value = 0xFF;
  59                  printf("(SPI_transfer) SPI_ERROR\n");
  60              }
  61              else {
  62                  error_flag = NO_ERROR;
  63                  *rec_value = SPDAT;
  64                  //printf("(SPI_transfer) NO_ERROR\n");
  65              }
  66              
  67              return error_flag;
  68          }*/
  69          
  70          #include "main.h"
  71          #include "PORT.H"
  72          #include "SPI.h"
  73          
  74          
  75          /***********************************************************************
  76          DESC:    Sets up the SPI to master mode with the clock as close
  77                   to the input parameter as possible.
  78                   clock=32-bit 
  79          RETURNS: Error Flag
  80          CAUTION: Sets the CPHA to 0 and CPOL to 0
  81                   Disables SS and sets master mode 
  82          ************************************************************************/
  83          
  84          uint8_t SPI_master_init(uint32_t clock_rate)
  85          {
  86   1        uint8_t divider,return_val;
  87   1        return_val=0;
  88   1        divider=(uint8_t)(((OSC_FREQ/OSC_PER_INST)*6)/clock_rate);
  89   1        if(divider<=2)
  90   1        {
  91   2           SPCON=0x70;
  92   2        }
  93   1        else if((divider>2)&&(divider<=4))
  94   1        {
  95   2           SPCON=0x71;
  96   2        }
  97   1        else if((divider>4)&&(divider<=8))
  98   1        {
  99   2           SPCON=0x72;
 100   2        }
 101   1        else if((divider>8)&&(divider<=16))
 102   1        {
 103   2           SPCON=0x73;
 104   2        } 
 105   1        else if((divider>16)&&(divider<=32))
 106   1        {
 107   2           SPCON=0xF0;
 108   2        }
 109   1        else if((divider>32)&&(divider<=64))
 110   1        {
 111   2           SPCON=0xF1;
 112   2        }
 113   1        else if((divider>64)&&(divider<=128))
 114   1        {
 115   2           SPCON=0xF2;
 116   2        }
 117   1        else  // if the SPI clock rate is too slow, a divider cannot be found
C51 COMPILER V9.53.0.0   SPI                                                               10/12/2018 04:29:04 PAGE 3   

 118   1        {
 119   2          return_val=CLOCK_RATE_ERROR;
 120   2        }
 121   1        return return_val;
 122   1      }
 123          
 124          /***********************************************************************
 125          DESC:    Sends one byte using the SPI port and returns the received byte
 126                    
 127          RETURNS: SPI Error Flags | received byte
 128                   or a timeout error
 129          CAUTION: Waits for the SPI transfer to be complete
 130          ************************************************************************/
 131          
 132          
 133          uint8_t SPI_transfer(uint8_t data_input, uint8_t * data_output)
 134          {
 135   1         uint8_t test, timeout;
 136   1         timeout=0;
 137   1         SPDAT=data_input;
 138   1         do
 139   1         {
 140   2            test=SPSTA;
 141   2                timeout++;
 142   2         }while(((test&0xF0)==0)&&(timeout!=0));
 143   1         if(timeout!=0)
 144   1         {
 145   2           if((test&0x70)==0)  // no errors
 146   2           {
 147   3               *data_output=SPDAT;
 148   3               timeout=NO_ERROR;
 149   3           }
 150   2           else
 151   2           {
 152   3               *data_output=0xff;
 153   3               timeout=SPI_ERROR;
 154   3           }
 155   2         }
 156   1         else
 157   1         {
 158   2           *data_output=0xff;
 159   2           timeout=TIMEOUT_ERROR;
 160   2         }
 161   1         return timeout;
 162   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    191    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
